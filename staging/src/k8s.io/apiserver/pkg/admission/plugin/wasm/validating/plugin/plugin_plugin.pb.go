//go:build tinygo.wasm

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v3.11.2
// source: plugin.proto

package plugin

import (
	context "context"
	wasm "github.com/knqyf263/go-plugin/wasm"
)

const ValidationPluginAPIVersion = 1

//export validation_api_version
func _validation_api_version() uint64 {
	return ValidationPluginAPIVersion
}

var validation Validation

func RegisterValidation(p Validation) {
	validation = p
}

//export validation_validate
func _validation_validate(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	var req ValidateRequest
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := validation.Validate(context.Background(), req)
	if err != nil {
		return 0
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

type host struct{}

func NewHost() Host {
	return host{}
}

//go:wasm-module env
//export authorizer
func _authorizer(ptr uint32, size uint32) uint64

func (h host) Authorizer(ctx context.Context, request SubjectAccessReviewSpec) (response SubjectAccessReviewStatus, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _authorizer(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export informer
func _informer(ptr uint32, size uint32) uint64

func (h host) Informer(ctx context.Context, request InformerRequest) (response InformerResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _informer(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}
